using FSH.WebApi.Application.Common.Persistence; // For IRepositoryWithEvents, IApplicationUnitOfWork
using FSH.WebApi.Domain.Common.Events; // For EntityCreatedEvent
using FSH.WebApi.Domain.HR; // For Employee entity
using MediatR; // For IRequestHandler

namespace FSH.WebApi.Application.HR.Employees.Commands;

public class CreateEmployeeRequestHandler : IRequestHandler<CreateEmployeeRequest, Guid>
{
    private readonly IRepositoryWithEvents<Employee> _employeeRepository;
    private readonly IApplicationUnitOfWork _uow;

    public CreateEmployeeRequestHandler(IRepositoryWithEvents<Employee> employeeRepository, IApplicationUnitOfWork uow)
    {
        _employeeRepository = employeeRepository;
        _uow = uow;
    }

    public async Task<Guid> Handle(CreateEmployeeRequest request, CancellationToken cancellationToken)
    {
        var employee = new Employee
        {
            // Id is typically generated by the database or AuditableEntity constructor
            FirstName = request.FirstName,
            LastName = request.LastName,
            Email = request.Email,
            PhoneNumber = request.PhoneNumber,
            DateOfBirth = request.DateOfBirth,
            DateOfJoining = request.DateOfJoining,
            DepartmentId = request.DepartmentId,
            JobTitleId = request.JobTitleId,
            ManagerId = request.ManagerId
        };

        employee.AddDomainEvent(EntityCreatedEvent.WithEntity(employee));

        await _employeeRepository.AddAsync(employee, cancellationToken);
        await _uow.CommitAsync(cancellationToken);

        return employee.Id;
    }
}
