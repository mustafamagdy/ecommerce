// <auto-generated />
using System;
using FSH.WebApi.Infrastructure.Multitenancy;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Migrators.PostgreSQL.Migrations.Tenant
{
    [DbContext(typeof(TenantDbContext))]
    [Migration("20220826152450_Tenant_InitialMigration")]
    partial class Tenant_InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.FSHTenantInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AdminEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AdminName")
                        .HasColumnType("text");

                    b.Property<string>("AdminPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("ConnectionString")
                        .HasColumnType("text");

                    b.Property<string>("DemoConnectionString")
                        .HasColumnType("text");

                    b.Property<Guid?>("DemoSubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Issuer")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProdSubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("TechSupportUserId")
                        .HasColumnType("text");

                    b.Property<string>("TrainConnectionString")
                        .HasColumnType("text");

                    b.Property<Guid?>("TrainSubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("VatNo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DemoSubscriptionId")
                        .IsUnique();

                    b.HasIndex("Identifier")
                        .IsUnique();

                    b.HasIndex("ProdSubscriptionId")
                        .IsUnique();

                    b.HasIndex("TrainSubscriptionId")
                        .IsUnique();

                    b.ToTable("Tenants", "MultiTenancy");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Days")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasPrecision(7, 3)
                        .HasColumnType("numeric(7,3)");

                    b.Property<string>("subscription_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Subscription");

                    b.HasDiscriminator<string>("subscription_type").HasValue("Subscription");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.SubscriptionHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasPrecision(7, 3)
                        .HasColumnType("numeric(7,3)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TenantSubscriptionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TenantSubscriptionId");

                    b.ToTable("SubscriptionHistories");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.SubscriptionPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasPrecision(7, 3)
                        .HasColumnType("numeric(7,3)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantProdSubscriptionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("TenantProdSubscriptionId");

                    b.ToTable("SubscriptionPayments");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.TenantSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("tenant_subscription_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("TenantSubscription");

                    b.HasDiscriminator<string>("tenant_subscription_type").HasValue("TenantSubscription");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.Operation.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CashDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RootPaymentMethods");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.DemoSubscription", b =>
                {
                    b.HasBaseType("FSH.WebApi.Domain.MultiTenancy.Subscription");

                    b.HasDiscriminator().HasValue("Demo");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.StandardSubscription", b =>
                {
                    b.HasBaseType("FSH.WebApi.Domain.MultiTenancy.Subscription");

                    b.HasDiscriminator().HasValue("Standard");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.TenantDemoSubscription", b =>
                {
                    b.HasBaseType("FSH.WebApi.Domain.MultiTenancy.TenantSubscription");

                    b.HasDiscriminator().HasValue("Demo");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.TenantProdSubscription", b =>
                {
                    b.HasBaseType("FSH.WebApi.Domain.MultiTenancy.TenantSubscription");

                    b.HasDiscriminator().HasValue("Standard");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.TenantTrainSubscription", b =>
                {
                    b.HasBaseType("FSH.WebApi.Domain.MultiTenancy.TenantSubscription");

                    b.HasDiscriminator().HasValue("Train");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.TrainSubscription", b =>
                {
                    b.HasBaseType("FSH.WebApi.Domain.MultiTenancy.Subscription");

                    b.HasDiscriminator().HasValue("Train");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.FSHTenantInfo", b =>
                {
                    b.HasOne("FSH.WebApi.Domain.MultiTenancy.TenantDemoSubscription", "DemoSubscription")
                        .WithOne("Tenant")
                        .HasForeignKey("FSH.WebApi.Domain.MultiTenancy.FSHTenantInfo", "DemoSubscriptionId");

                    b.HasOne("FSH.WebApi.Domain.MultiTenancy.TenantProdSubscription", "ProdSubscription")
                        .WithOne("Tenant")
                        .HasForeignKey("FSH.WebApi.Domain.MultiTenancy.FSHTenantInfo", "ProdSubscriptionId");

                    b.HasOne("FSH.WebApi.Domain.MultiTenancy.TenantTrainSubscription", "TrainSubscription")
                        .WithOne("Tenant")
                        .HasForeignKey("FSH.WebApi.Domain.MultiTenancy.FSHTenantInfo", "TrainSubscriptionId");

                    b.Navigation("DemoSubscription");

                    b.Navigation("ProdSubscription");

                    b.Navigation("TrainSubscription");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.SubscriptionHistory", b =>
                {
                    b.HasOne("FSH.WebApi.Domain.MultiTenancy.TenantSubscription", "TenantSubscription")
                        .WithMany("History")
                        .HasForeignKey("TenantSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TenantSubscription");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.SubscriptionPayment", b =>
                {
                    b.HasOne("FSH.WebApi.Domain.Operation.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSH.WebApi.Domain.MultiTenancy.TenantProdSubscription", "TenantProdSubscription")
                        .WithMany("Payments")
                        .HasForeignKey("TenantProdSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("TenantProdSubscription");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.TenantSubscription", b =>
                {
                    b.HasOne("FSH.WebApi.Domain.MultiTenancy.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.TenantSubscription", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.TenantDemoSubscription", b =>
                {
                    b.Navigation("Tenant")
                        .IsRequired();
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.TenantProdSubscription", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Tenant")
                        .IsRequired();
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.TenantTrainSubscription", b =>
                {
                    b.Navigation("Tenant")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
