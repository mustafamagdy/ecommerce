// <auto-generated />
using System;
using FSH.WebApi.Infrastructure.Multitenancy;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Migrators.MySQL.Migrations.Tenant
{
    [DbContext(typeof(TenantDbContext))]
    [Migration("20220702081146_Tenant_InitialMigration")]
    partial class Tenant_InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.FSHTenantInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("AdminEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AdminName")
                        .HasColumnType("longtext");

                    b.Property<string>("AdminPhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("ConnectionString")
                        .HasColumnType("longtext");

                    b.Property<string>("DemoConnectionString")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("DemoSubscriptionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Issuer")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ProdSubscriptionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("TechSupportUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("TrainConnectionString")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("TrainSubscriptionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("VatNo")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DemoSubscriptionId");

                    b.HasIndex("Identifier")
                        .IsUnique();

                    b.HasIndex("ProdSubscriptionId");

                    b.HasIndex("TrainSubscriptionId");

                    b.ToTable("Tenants", "MultiTenancy");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("SubscriptionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Subscription");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Subscription");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.SubscriptionHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid?>("StandardSubscriptionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("StandardSubscriptionId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SubscriptionHistories");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.SubscriptionPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FSHTenantInfoId")
                        .HasColumnType("varchar(64)");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("FSHTenantInfoId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("SubscriptionPayments");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.Operation.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("CashDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RootPaymentMethods");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.Structure.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.DemoSubscription", b =>
                {
                    b.HasBaseType("FSH.WebApi.Domain.MultiTenancy.Subscription");

                    b.HasDiscriminator().HasValue("DemoSubscription");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.StandardSubscription", b =>
                {
                    b.HasBaseType("FSH.WebApi.Domain.MultiTenancy.Subscription");

                    b.HasDiscriminator().HasValue("StandardSubscription");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.TrainSubscription", b =>
                {
                    b.HasBaseType("FSH.WebApi.Domain.MultiTenancy.Subscription");

                    b.HasDiscriminator().HasValue("TrainSubscription");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.FSHTenantInfo", b =>
                {
                    b.HasOne("FSH.WebApi.Domain.MultiTenancy.DemoSubscription", "DemoSubscription")
                        .WithMany()
                        .HasForeignKey("DemoSubscriptionId");

                    b.HasOne("FSH.WebApi.Domain.MultiTenancy.StandardSubscription", "ProdSubscription")
                        .WithMany()
                        .HasForeignKey("ProdSubscriptionId");

                    b.HasOne("FSH.WebApi.Domain.MultiTenancy.TrainSubscription", "TrainSubscription")
                        .WithMany()
                        .HasForeignKey("TrainSubscriptionId");

                    b.Navigation("DemoSubscription");

                    b.Navigation("ProdSubscription");

                    b.Navigation("TrainSubscription");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.SubscriptionHistory", b =>
                {
                    b.HasOne("FSH.WebApi.Domain.MultiTenancy.StandardSubscription", null)
                        .WithMany("SubscriptionHistory")
                        .HasForeignKey("StandardSubscriptionId");

                    b.HasOne("FSH.WebApi.Domain.MultiTenancy.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.SubscriptionPayment", b =>
                {
                    b.HasOne("FSH.WebApi.Domain.MultiTenancy.FSHTenantInfo", null)
                        .WithMany("Payments")
                        .HasForeignKey("FSHTenantInfoId");

                    b.HasOne("FSH.WebApi.Domain.Operation.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.Structure.Branch", b =>
                {
                    b.HasOne("FSH.WebApi.Domain.MultiTenancy.FSHTenantInfo", "Tenant")
                        .WithMany("Branches")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.FSHTenantInfo", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("FSH.WebApi.Domain.MultiTenancy.StandardSubscription", b =>
                {
                    b.Navigation("SubscriptionHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
